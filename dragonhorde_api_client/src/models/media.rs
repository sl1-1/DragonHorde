/*
 * DragonHorde
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Media : A piece of media
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Media {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Media Location
    #[serde(rename = "storage_uri", skip_serializing_if = "Option::is_none")]
    pub storage_uri: Option<String>,
    #[serde(rename = "sha256", skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    #[serde(rename = "perceptual_hash", skip_serializing_if = "Option::is_none")]
    pub perceptual_hash: Option<String>,
    /// date-time the media was uploaded to this instance
    #[serde(rename = "uploaded", skip_serializing_if = "Option::is_none")]
    pub uploaded: Option<String>,
    /// date-time the media was created
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "creators", skip_serializing_if = "Option::is_none")]
    pub creators: Option<Vec<String>>,
    #[serde(rename = "tag_groups", skip_serializing_if = "Option::is_none")]
    pub tag_groups: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<String>>,
    #[serde(rename = "collections", skip_serializing_if = "Option::is_none")]
    pub collections: Option<Vec<String>>,
    pub description: Option<String>,
}

impl Media {
    /// A piece of media
    pub fn new() -> Media {
        Media {
            id: None,
            storage_uri: None,
            sha256: None,
            perceptual_hash: None,
            uploaded: None,
            created: None,
            title: None,
            creators: None,
            tag_groups: None,
            sources: None,
            collections: None,
            description: None,
        }
    }
    pub fn default() -> Media {
        Media {
            id: None,
            storage_uri: None,
            sha256: None,
            perceptual_hash: None,
            uploaded: None,
            created: None,
            title: None,
            creators: None,
            tag_groups: None,
            sources: None,
            collections: None,
            description: None,
        }
    }
}

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResult {
    pub result: Vec<Media>,
}

impl SearchResult {
    pub fn new() -> Self {
        Self{
            result: Vec::new(),
        }
    }
}


