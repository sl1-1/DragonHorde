//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "creators")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    pub aliases: Option<String>,
    pub sites: Option<String>,
    pub created: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collection_creators::Entity")]
    CollectionCreators,
    #[sea_orm(has_many = "super::media_creators::Entity")]
    MediaCreators,
}

impl Related<super::collection_creators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionCreators.def()
    }
}

impl Related<super::media_creators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaCreators.def()
    }
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        super::collection_creators::Relation::Collections.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::collection_creators::Relation::Creators.def().rev())
    }
}

impl Related<super::media::Entity> for Entity {
    fn to() -> RelationDef {
        super::media_creators::Relation::Media.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::media_creators::Relation::Creators.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
