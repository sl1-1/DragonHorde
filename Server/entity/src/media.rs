//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "media")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub storage_uri: String,
    pub sha256: String,
    pub perceptual_hash: Option<String>,
    pub uploaded: DateTimeWithTimeZone,
    pub created: Option<DateTimeWithTimeZone>,
    pub title: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::media_collection::Entity")]
    MediaCollection,
    #[sea_orm(has_many = "super::media_creators::Entity")]
    MediaCreators,
    #[sea_orm(has_many = "super::media_tags::Entity")]
    MediaTags,
    #[sea_orm(has_many = "super::sources::Entity")]
    Sources,
}

impl Related<super::media_collection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaCollection.def()
    }
}

impl Related<super::media_creators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaCreators.def()
    }
}

impl Related<super::media_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaTags.def()
    }
}

impl Related<super::sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sources.def()
    }
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        super::media_collection::Relation::Collections.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::media_collection::Relation::Media.def().rev())
    }
}

impl Related<super::creators::Entity> for Entity {
    fn to() -> RelationDef {
        super::media_creators::Relation::Creators.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::media_creators::Relation::Media.def().rev())
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::media_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::media_tags::Relation::Media.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
