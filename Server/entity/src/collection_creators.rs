//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "collection_creators")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub creator_id: i64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub collection_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collections::Entity",
        from = "Column::CollectionId",
        to = "super::collections::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Collections,
    #[sea_orm(
        belongs_to = "super::creators::Entity",
        from = "Column::CreatorId",
        to = "super::creators::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Creators,
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collections.def()
    }
}

impl Related<super::creators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Creators.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
