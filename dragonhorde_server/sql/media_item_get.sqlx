WITH RECURSIVE cte AS (SELECT id, name, parent, array [name] as path
                       FROM collections
                       WHERE parent is null
                       UNION ALL
                       SELECT c.id, c.name, c.parent, ct.path || c.name
                       FROM cte ct
                                JOIN
                            collections c
                            ON c.parent = ct.id)
SELECT "media"."id",
               "storage_uri",
               "sha256",
               CAST("perceptual_hash" AS bigint),
               "uploaded" as "uploaded: chrono::DateTime<FixedOffset>",
               "media"."created" as "created: chrono::DateTime<FixedOffset>",
               "title",
               "media"."description",
               "media"."metadata",
               "media"."type"                                                                                          AS "file_type",
               ARRAY_AGG(DISTINCT creators.name) FILTER (WHERE media_creators.media_id = media.id)                     AS "creators",
               ARRAY_AGG(DISTINCT array_to_string(collections.path, '/', '*')) FILTER (WHERE media_collection.media_id = media.id)                AS "collections",
               json_object_agg(DISTINCT collections.id, array_to_string(collections.path, '/', '*'))
                        FILTER (WHERE media_collection.media_id = media.id)                                            AS "collections_with_id: sqlx::types::Json<HashMap<String, String>>",
               ARRAY_AGG(DISTINCT sources.source) FILTER (WHERE sources.media_id = media.id)                           AS "sources",
               JSON_OBJECT_AGG(t.name, ts) FILTER (WHERE t.media_id = media.id)                                        AS "tag_groups: sqlx::types::Json<HashMap<String, Vec<String>>>",
               CASE
                   WHEN $2::bit(64) IS NOT NULL
                       THEN perceptual_hash <~> $2::bit(64)
                   END
                           as "distance: f64"
        FROM "media"
                 LEFT JOIN "media_creators" ON "media_creators"."media_id" = "media"."id"
                 LEFT JOIN "creators" ON "creators"."id" = "media_creators"."creator_id"
                 LEFT JOIN "media_collection" ON "media_collection"."media_id" = "media"."id"
                 LEFT JOIN cte AS collections on collections.id = media_collection.collection_id
                 LEFT JOIN "sources" ON "sources"."media_id" = "media"."id"
                 LEFT JOIN (SELECT "media_tags"."media_id", "tag_groups"."name", JSON_AGG("tags"."tag") AS "ts"
                            FROM "tag_groups"
                                     LEFT JOIN "tags" ON "tags"."group" = "tag_groups"."id"
                                     LEFT JOIN "media_tags" ON "tags"."id" = "media_tags"."tag_id"
                            GROUP BY "name", "media_tags"."media_id") AS "t" ON t.media_id = media.id
        WHERE "media"."id" = ANY($1::bigint[])
        GROUP BY "media"."id", "media"."uploaded"
        ORDER BY array_position($1, media.id);