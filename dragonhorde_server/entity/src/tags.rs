//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tags")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "Text", unique)]
    pub tag: String,
    pub created: DateTimeWithTimeZone,
    pub group: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collection_tags::Entity")]
    CollectionTags,
    #[sea_orm(has_many = "super::media_tags::Entity")]
    MediaTags,
    #[sea_orm(
        belongs_to = "super::tag_groups::Entity",
        from = "Column::Group",
        to = "super::tag_groups::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TagGroups,
}

impl Related<super::collection_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionTags.def()
    }
}

impl Related<super::media_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaTags.def()
    }
}

impl Related<super::tag_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TagGroups.def()
    }
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        super::collection_tags::Relation::Collections.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::collection_tags::Relation::Tags.def().rev())
    }
}

impl Related<super::media::Entity> for Entity {
    fn to() -> RelationDef {
        super::media_tags::Relation::Media.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::media_tags::Relation::Tags.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
