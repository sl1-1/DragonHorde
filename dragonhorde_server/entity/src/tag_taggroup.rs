//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tag_taggroup")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub tag_id: i64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub tag_group_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tag_groups::Entity",
        from = "Column::TagGroupId",
        to = "super::tag_groups::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TagGroups,
    #[sea_orm(
        belongs_to = "super::tags::Entity",
        from = "Column::TagId",
        to = "super::tags::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tags,
}

impl Related<super::tag_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TagGroups.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
